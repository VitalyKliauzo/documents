1. Angular life Cycle:


2. Dependency Injection
	Angular's dependency injector provides services to your controller when the controller is being constructed. The dependency injector also takes care of creating any transitive dependencies the service may have (services often depend upon other services).
	Note that the names of arguments are significant, because the injector uses these to look up the dependencies.
	http://code.angularjs.org/1.2.13/docs/img/tutorial/xhr_service_final.png

3.1. Bootstrap: Automatic Initialization
	There are 3 important things that happen during the app bootstrap:
	- Angular loads the module associated with the ng-app directive.
	- The injector that will be used for dependency injection is created.
	- The injector will then create the root scope that will become the context for the model of our application.
	- Angular will then "compile" the DOM starting at the ngApp root element, processing any directives and bindings found along the way.

	insert image to the slide 
	http://code.angularjs.org/1.2.12/docs/img/guide/concepts-startup.png

	useful link: http://code.angularjs.org/1.2.12/docs/guide/bootstrap

3.2. Bootstrap: Manual Initialization
	example:
		<!doctype html>
		<html xmlns:ng="http://angularjs.org">
		  <body>
		    Hello {{'World'}}!
		    <script src="http://code.angularjs.org/angular.js"></script>
		    <script>
		       angular.element(document).ready(function() {
		         angular.module('myApp', []);
		         angular.bootstrap(document, ['myApp']);
		       });
		    </script>
		  </body>
		</html>

	This is the sequence that your code should follow:
	- After the page and all of the code is loaded, find the root element of your AngularJS application, which is typically the root of the document.
	- Call api/angular.bootstrap to compile the element into an executable, bi-directionally bound application.
3.3. Bootstrap: Deferred Bootstrap
	This feature enables tools like Batarang and test runners to hook into angular's bootstrap process and sneak in more modules into the DI registry which can replace or augment DI services for the purpose of instrumentation or mocking out heavy dependencies.

	If window.name contains prefix NG_DEFER_BOOTSTRAP! when api/angular.bootstrap is called, the bootstrap process will be paused until angular.resumeBootstrap() is called.

	angular.resumeBootstrap() takes an optional array of modules that should be added to the original list of modules that the app was about to be bootstrapped with

4.1. Dependency Injection
	There are only three ways an object or a function can get a hold of its dependencies:
	-The dependency can be created, typically using the new operator.
	-The dependency can be looked up by referring to a global variable.
	-The dependency can be passed in to where it is needed.

4.2. Dependency Annotation
	Inferring Dependencies:		
	function MyController($scope, greeter) {
	  ...
	}
	While straightforward, this method will not work with JavaScript minifiers/obfuscators as they rename the method parameter names.

4.3. Dependency Annotation
	$inject Annotation
	var MyController = function(renamed$scope, renamedGreeter) {
	  ...
	}
	MyController['$inject'] = ['$scope', 'greeter'];
	This method of annotation is useful for controller declarations since it assigns the annotation information with the function.

4.4. Dependency Annotation
	Inline Annotation
	someModule.factory('greeter', ['$window', function(renamed$window) {
	  ...
	}]);
	Keep in mind that all of the annotation styles are equivalent and can be used anywhere in Angular where injection is supported.

4.5 Where to use DI
	DI in controllers
	someModule.controller('MyController', ['$scope', 'dep1', 'dep2', function($scope, dep1, dep2) {
	  ...
	  $scope.aMethod = function() {
	    ...
	  }
	  ...
	}]);
	This avoids the creation of global functions for controllers and also protects against minification.

4.6. Where to use DI
	Factory methods
	Examples are directives, services, and filters.
	angular.module('myModule', []).
	  config(['depProvider', function(depProvider){
	    ...
	  }]).
	  factory('serviceId', ['depService', function(depService) {
	    ...
	  }]).
	  directive('directiveName', ['depService', function(depService) {
	    ...
	  }]).
	  filter('filterName', ['depService', function(depService) {
	    ...
	  }]).
	  run(['depService', function(depService) {
	    ...
	  }]);




http://docs.angularjs.org/api/ng/type/$rootScope.Scope
Usually, you don't call $digest() directly in controllers or in directives. Instead, you should call $apply() (typically from within a directives), which will force a $digest().

$apply() is used to execute an expression in angular from outside of the angular framework. (For example from browser DOM events, setTimeout, XHR or third party libraries). Because we are calling into the angular framework we need to perform proper scope life cycle of exception handling, executing watches.

You may also need to use it for setTimeout events, XHR callbacks, and integrating with 3rd party libraries.


