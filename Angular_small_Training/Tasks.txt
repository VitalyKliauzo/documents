1. To display the inheritance of scopes in angularjs applications do the following:
 a. with ng-init create a shared value in root scope
 b. create parentCtrl1 and parentCtrl2 on the same level under root scope
 c. in the scope level of parentCtrl1 and parentCtrl2 place inputs with ng-model bound to shared value
 d. near each input place output of shared value with {{}} expression
 e. create ChildCtrl1 and ChildCtrl2 under parentCtrl1 scope
 f. in the scope level of ChildCtrl1 and ChildCtrl2 place inputs with ng-model bound to shared value
 g. near each inputs place outputs of shared value with {{}} expression
 h. improve the application so that all the {{}} show the same values after different scenarios of typing in valuse into different inputs.
 
2.1 create any directive with isolated scope (tab control with callbacks on activating new tab) which will use ng-transclude
	Tab control should have not limited number of possible tabs inside.
	It should have callback onTabActivated so that each tab could load data only in case it's needed (lazy loading for each tab)
	
2.2 Cover the tab control from previous task with tests which demonstrate that callback are called when tab is activated

3. Create application that will use tab control and will show that ng-transclude jumps over isolated scope.
	For that initialize value in root scope with the same name as tab control has in isolated scope and uses for own template (for example title which is the title for the tab).
	also use {{}} expression for displaying the title value from root scope above tab control is used and alos in one of its tab (in pane).
	
4. Implement application that will demonstrate communication between directives with firing events.
	For that place directives in a different scopes with the only parent which is root scope.
	
5. Implement application that will demonstrate communication between directives using dependency injection.
	so that data is transfered through the services injected into both directives.
	
6. Digest cycle:
	create application which demonstrate work of digest cycle. For that create2 methods (one starting $timeout for changing value in scope, another uses setTimeout for changing the value) for changing value in scope.
	Display the value with {{}} expression. Check that label displaying the value changed with setTimeout is not refreshed.
	
	Do the same with ajax, click event.
 	
7. Implement widget with jquery. For example a modal window which display the file list coming from backend.
	Widget has setValue, getValue, onValueChanged methods as public API. onValueChanged is a callback that called when the used mark/unmark a file from the list as selected (for example checks/uncheches checkbox related to the file).
	The file list is something specific for the widget(widget request it from backend, or you can emulate async operation with setTimeout or just hardcode some collection)
	
7.1 Wrap jquery widget with angularjs directive so that hide all the details of implementation. To demonstrate it create the list of selected files in angularJS controller.
	display this list with ng-repeat and {{}} expression.
	Send this list as a list of selected files to directive.
	Check that the list of files in modal window and rendererd with ng-repeat is the same.
	Check/uncheck several files. Check that the list rendered with ng-repeat is changing as you are selecting/unselecting files in modal window.

7.2 Cover this control with test on jasmine to automate verification mentioned above.



	